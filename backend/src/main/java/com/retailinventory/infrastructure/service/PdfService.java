package com.retailinventory.infrastructure.service;

import com.retailinventory.domain.entity.PurchaseOrder;
import com.retailinventory.domain.entity.PurchaseOrderItem;
import com.retailinventory.domain.entity.Store;
import com.retailinventory.domain.entity.Supplier;
import com.retailinventory.domain.repository.PurchaseOrderItemRepository;
import com.retailinventory.domain.repository.StoreRepository;
import com.retailinventory.domain.repository.SupplierRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Service for generating PDF documents.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class PdfService {

    private final StoreRepository storeRepository;
    private final SupplierRepository supplierRepository;
    private final PurchaseOrderItemRepository purchaseOrderItemRepository;

    /**
     * Generate PDF for purchase order.
     */
    public byte[] generatePurchaseOrderPdf(PurchaseOrder purchaseOrder) {
        try {
            // Get related entities
            Store store = storeRepository.findById(purchaseOrder.getStoreId())
                    .orElseThrow(() -> new RuntimeException("Store not found"));
            Supplier supplier = supplierRepository.findById(purchaseOrder.getSupplierId())
                    .orElseThrow(() -> new RuntimeException("Supplier not found"));
            List<PurchaseOrderItem> items = purchaseOrderItemRepository.findByPurchaseOrderId(purchaseOrder.getId());

            // Generate PDF content
            StringBuilder pdfContent = new StringBuilder();
            pdfContent.append("PURCHASE ORDER\n");
            pdfContent.append("==============\n\n");
            
            // Header information
            pdfContent.append("PO Number: ").append(purchaseOrder.getPoNumber()).append("\n");
            pdfContent.append("Order Date: ").append(purchaseOrder.getOrderDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\n");
            pdfContent.append("Expected Delivery: ").append(purchaseOrder.getExpectedDeliveryDate().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\n");
            pdfContent.append("Status: ").append(purchaseOrder.getStatus()).append("\n\n");
            
            // Store information
            pdfContent.append("BILL TO:\n");
            pdfContent.append(store.getName()).append("\n");
            pdfContent.append(store.getAddress()).append("\n");
            pdfContent.append(store.getCity()).append(", ").append(store.getCountry()).append("\n\n");
            
            // Supplier information
            pdfContent.append("SHIP TO:\n");
            pdfContent.append(supplier.getName()).append("\n");
            pdfContent.append(supplier.getAddress()).append("\n");
            pdfContent.append("Contact: ").append(supplier.getContactEmail()).append("\n\n");
            
            // Items table
            pdfContent.append("ITEMS:\n");
            pdfContent.append("------\n");
            pdfContent.append(String.format("%-20s %-50s %-10s %-12s %-12s\n", 
                    "SKU", "Description", "Qty", "Unit Price", "Total"));
            pdfContent.append(String.format("%-20s %-50s %-10s %-12s %-12s\n", 
                    "---", "-----------", "---", "----------", "-----"));
            
            BigDecimal totalAmount = BigDecimal.ZERO;
            for (PurchaseOrderItem item : items) {
                BigDecimal itemTotal = item.getUnitPrice().multiply(BigDecimal.valueOf(item.getQuantity()));
                totalAmount = totalAmount.add(itemTotal);
                
                pdfContent.append(String.format("%-20s %-50s %-10d %-12.2f %-12.2f\n",
                        item.getProductId().toString().substring(0, 8) + "...", // Truncated for display
                        "Product Item", // Would get from product repository
                        item.getQuantity(),
                        item.getUnitPrice().doubleValue(),
                        itemTotal.doubleValue()));
            }
            
            pdfContent.append("\n");
            pdfContent.append(String.format("%-82s %-12.2f\n", "TOTAL:", totalAmount.doubleValue()));
            
            // Footer
            pdfContent.append("\n\n");
            pdfContent.append("Generated on: ").append(java.time.LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
            pdfContent.append("Generated by: Retail Inventory Platform\n");
            
            // Convert to byte array (in a real implementation, you'd use a proper PDF library like iText)
            return pdfContent.toString().getBytes();
            
        } catch (Exception e) {
            log.error("Error generating PDF for purchase order: {}", purchaseOrder.getId(), e);
            throw new RuntimeException("Failed to generate PDF", e);
        }
    }

    /**
     * Generate PDF filename for purchase order.
     */
    public String generatePurchaseOrderFilename(PurchaseOrder purchaseOrder) {
        return String.format("PO_%s_%s.pdf", 
                purchaseOrder.getPoNumber(),
                purchaseOrder.getOrderDate().format(DateTimeFormatter.ofPattern("yyyyMMdd")));
    }
}
