name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Spring Boot tests
        run: |
          cd backend
          ./mvnw test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run Python tests
        run: |
          cd backend
          python -m pytest tests/ -v
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Run linting
        run: |
          cd frontend
          npm run lint

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Spring Boot image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.spring
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-spring-api:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push ML API image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ml-api:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig

          # Update image tags in kustomization
          cd k8s
          sed -i "s|your-registry/retail-inventory-spring-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-spring-api:${{ github.sha }}|g" kustomization.yaml
          sed -i "s|your-registry/retail-inventory-ml-api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ml-api:${{ github.sha }}|g" kustomization.yaml
          sed -i "s|your-registry/retail-inventory-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g" kustomization.yaml

          # Apply Kubernetes manifests
          kubectl apply -k .

          # Wait for deployment to be ready
          kubectl rollout status deployment/spring-api -n retail-inventory --timeout=300s
          kubectl rollout status deployment/ml-api -n retail-inventory --timeout=300s
          kubectl rollout status deployment/frontend -n retail-inventory --timeout=300s

      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig

          # Get the ingress IP
          INGRESS_IP=$(kubectl get ingress retail-inventory-ingress -n retail-inventory -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Wait for ingress to be ready
          timeout 300 bash -c 'until curl -f http://$INGRESS_IP/health; do sleep 10; done'

          # Run basic health checks
          curl -f http://$INGRESS_IP/api/actuator/health
          curl -f http://$INGRESS_IP/ml/health
